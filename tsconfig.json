{
	//  "extends": "../tsconfig.json",
	"compilerOptions": {
		"target": "es6" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
		"module": "CommonJS" /* Specify what module code is generated. */,
		// "rootDir": "./",                                  /* Specify the root folder within your source files. */
		"moduleResolution": "node" /* Specify how TypeScript looks up a file from a given module specifier. */,

		"resolveJsonModule": true /* Enable importing .json files. */,
		"allowJs": true /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */,

		"allowSyntheticDefaultImports": true /* Allow 'import x from y' when a module doesn't have a default export. */,
		"esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
		// "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
		"forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

		/* Type Checking */
		"strict": true /* Enable all strict type-checking options. */,
		// "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
		// "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
		// "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
		// "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
		// "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
		// "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
		// "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
		// "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
		// "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
		"types": ["node", "jest"],
		"typeRoots": ["core/types", "node_modules/@types"],
		// "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
		// "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
		// "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
		// "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
		// "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
		// "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
		// "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
		// "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
		// "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

		/* Completeness */
		// "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
		"skipLibCheck": true /* Skip type checking all .d.ts files. */,
		// "noEmit": true /* Disable emitting files from a compilation. */,
		"removeComments": false,
		"disableSizeLimit": true,
		"experimentalDecorators": true,
		"emitDecoratorMetadata": true,
		"strictNullChecks": true,
		"pretty": true,
		"noImplicitAny": false,
		"noEmit": true,
		"jsx": "react",
		//    "noImplicitAny": true,
		"paths": {
			"utils/api/client": ["./core/utils/api/client.ts"],
			"utils/*": ["./core/utils/*"],
			"facets": ["./core/facets/index.ts"],
			"facets/*": ["./core/facets/*"],
			"types": ["./core/types/index.ts"],
			"types/*": ["./core/types/*"],
			"server/*": ["./core/server/*"],
			"client/*": ["./core/client/*"],
			"components": ["./core/client/components/index.ts"],
			"components/*": ["./core/client/components/*"],
			"containers": ["./core/client/containers/index.ts"],
			"containers/*": ["./core/client/containers/*"],
			"deposit/*": ["./core/deposit/*"],
			"workers/*": ["./core/workers/*"],
			"workers/tasks/import/tempDirectory": ["./core/workers/tasks/import/tempDirectory.ts"],
		},
	},
	"include": [
		// "expand-typedoc.js",
		"src/**.ts",
		// "src/lib/client.ts",
		// "test/**.ts",
		// "src/lib/initialData.ts",
		// "core/types/sequelize-actorid-override.d.ts",
		// "test/utils/sleep.ts" //    "core/utils/api/client.ts"
	],

	"exclude": ["node_modules", "dist", "web"],
}
